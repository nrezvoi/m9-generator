'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _requireDir = require('require-dir');

var _requireDir2 = _interopRequireDefault(_requireDir);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = loadContent;


function loadContent(options) {
  const {
    directory,
    transformer
  } = options;

  const staticDir = _path2.default.join(directory, 'static');
  const dynamicDir = _path2.default.join(directory, 'dynamic');

  const content = loadJsonContent(staticDir);
  if (transformer) transformContent(content, transformer);
  runAugmentersFromDir(dynamicDir, content);

  return content;
}

function loadJsonContent(dir) {
  return (0, _requireDir2.default)(dir);
}

function runAugmentersFromDir(dir, content) {
  const augmenters = (0, _requireDir2.default)(dir);
  Object.keys(augmenters).forEach(contentType => {
    const augment = augmenters[contentType];
    const entities = content[contentType];

    if (!entities) {
      content[contentType] = augment({}, content, _config2.default);
      return;
    }

    if (!Array.isArray(entities)) {
      content[contentType] = augment(entities, content, _config2.default);
      return;
    }

    content[contentType] = entities.map(entity => augment(entity, content, _config2.default));
  });
}

function transformContent(content, transformerName) {
  const transformerFn = transformerByName(transformerName);
  transformerFn(content);
}

function transformerByName(transformerName) {
  try {
    return require(`./content-transformers/${transformerName}`);
  } catch (error) {
    throw new Error(`Unsupported transformer "${transformerName}"`);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvbG9hZC1jb250ZW50LmpzIl0sIm5hbWVzIjpbImxvYWRDb250ZW50Iiwib3B0aW9ucyIsImRpcmVjdG9yeSIsInRyYW5zZm9ybWVyIiwic3RhdGljRGlyIiwiam9pbiIsImR5bmFtaWNEaXIiLCJjb250ZW50IiwibG9hZEpzb25Db250ZW50IiwidHJhbnNmb3JtQ29udGVudCIsInJ1bkF1Z21lbnRlcnNGcm9tRGlyIiwiZGlyIiwiYXVnbWVudGVycyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiY29udGVudFR5cGUiLCJhdWdtZW50IiwiZW50aXRpZXMiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJlbnRpdHkiLCJ0cmFuc2Zvcm1lck5hbWUiLCJ0cmFuc2Zvcm1lckZuIiwidHJhbnNmb3JtZXJCeU5hbWUiLCJyZXF1aXJlIiwiZXJyb3IiLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7a0JBRWVBLFc7OztBQUVmLFNBQVNBLFdBQVQsQ0FBc0JDLE9BQXRCLEVBQStCO0FBQzdCLFFBQU07QUFDSkMsYUFESTtBQUVKQztBQUZJLE1BR0ZGLE9BSEo7O0FBS0EsUUFBTUcsWUFBWSxlQUFLQyxJQUFMLENBQVVILFNBQVYsRUFBcUIsUUFBckIsQ0FBbEI7QUFDQSxRQUFNSSxhQUFhLGVBQUtELElBQUwsQ0FBVUgsU0FBVixFQUFxQixTQUFyQixDQUFuQjs7QUFFQSxRQUFNSyxVQUFVQyxnQkFBZ0JKLFNBQWhCLENBQWhCO0FBQ0EsTUFBSUQsV0FBSixFQUFpQk0saUJBQWlCRixPQUFqQixFQUEwQkosV0FBMUI7QUFDakJPLHVCQUFxQkosVUFBckIsRUFBaUNDLE9BQWpDOztBQUVBLFNBQU9BLE9BQVA7QUFDRDs7QUFFRCxTQUFTQyxlQUFULENBQTBCRyxHQUExQixFQUErQjtBQUM3QixTQUFPLDBCQUFXQSxHQUFYLENBQVA7QUFDRDs7QUFFRCxTQUFTRCxvQkFBVCxDQUErQkMsR0FBL0IsRUFBb0NKLE9BQXBDLEVBQTZDO0FBQzNDLFFBQU1LLGFBQWEsMEJBQVdELEdBQVgsQ0FBbkI7QUFDQUUsU0FBT0MsSUFBUCxDQUFZRixVQUFaLEVBQXdCRyxPQUF4QixDQUFnQ0MsZUFBZTtBQUM3QyxVQUFNQyxVQUFVTCxXQUFXSSxXQUFYLENBQWhCO0FBQ0EsVUFBTUUsV0FBV1gsUUFBUVMsV0FBUixDQUFqQjs7QUFFQSxRQUFJLENBQUNFLFFBQUwsRUFBZTtBQUNiWCxjQUFRUyxXQUFSLElBQXVCQyxRQUFRLEVBQVIsRUFBWVYsT0FBWixtQkFBdkI7QUFDQTtBQUNEOztBQUVELFFBQUksQ0FBQ1ksTUFBTUMsT0FBTixDQUFjRixRQUFkLENBQUwsRUFBOEI7QUFDNUJYLGNBQVFTLFdBQVIsSUFBdUJDLFFBQVFDLFFBQVIsRUFBa0JYLE9BQWxCLG1CQUF2QjtBQUNBO0FBQ0Q7O0FBRURBLFlBQVFTLFdBQVIsSUFBdUJFLFNBQVNHLEdBQVQsQ0FBYUMsVUFBVUwsUUFBUUssTUFBUixFQUFnQmYsT0FBaEIsbUJBQXZCLENBQXZCO0FBQ0QsR0FmRDtBQWdCRDs7QUFFRCxTQUFTRSxnQkFBVCxDQUEyQkYsT0FBM0IsRUFBb0NnQixlQUFwQyxFQUFxRDtBQUNuRCxRQUFNQyxnQkFBZ0JDLGtCQUFrQkYsZUFBbEIsQ0FBdEI7QUFDQUMsZ0JBQWNqQixPQUFkO0FBQ0Q7O0FBRUQsU0FBU2tCLGlCQUFULENBQTRCRixlQUE1QixFQUE2QztBQUMzQyxNQUFJO0FBQ0YsV0FBT0csUUFBUywwQkFBeUJILGVBQWdCLEVBQWxELENBQVA7QUFDRCxHQUZELENBRUUsT0FBT0ksS0FBUCxFQUFjO0FBQ2QsVUFBTSxJQUFJQyxLQUFKLENBQVcsNEJBQTJCTCxlQUFnQixHQUF0RCxDQUFOO0FBQ0Q7QUFDRiIsImZpbGUiOiJsb2FkLWNvbnRlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHJlcXVpcmVEaXIgZnJvbSAncmVxdWlyZS1kaXInXG5pbXBvcnQgY29uZmlnIGZyb20gJy4uL2NvbmZpZydcblxuZXhwb3J0IGRlZmF1bHQgbG9hZENvbnRlbnRcblxuZnVuY3Rpb24gbG9hZENvbnRlbnQgKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIGRpcmVjdG9yeSxcbiAgICB0cmFuc2Zvcm1lclxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IHN0YXRpY0RpciA9IHBhdGguam9pbihkaXJlY3RvcnksICdzdGF0aWMnKVxuICBjb25zdCBkeW5hbWljRGlyID0gcGF0aC5qb2luKGRpcmVjdG9yeSwgJ2R5bmFtaWMnKVxuXG4gIGNvbnN0IGNvbnRlbnQgPSBsb2FkSnNvbkNvbnRlbnQoc3RhdGljRGlyKVxuICBpZiAodHJhbnNmb3JtZXIpIHRyYW5zZm9ybUNvbnRlbnQoY29udGVudCwgdHJhbnNmb3JtZXIpXG4gIHJ1bkF1Z21lbnRlcnNGcm9tRGlyKGR5bmFtaWNEaXIsIGNvbnRlbnQpXG5cbiAgcmV0dXJuIGNvbnRlbnRcbn1cblxuZnVuY3Rpb24gbG9hZEpzb25Db250ZW50IChkaXIpIHtcbiAgcmV0dXJuIHJlcXVpcmVEaXIoZGlyKVxufVxuXG5mdW5jdGlvbiBydW5BdWdtZW50ZXJzRnJvbURpciAoZGlyLCBjb250ZW50KSB7XG4gIGNvbnN0IGF1Z21lbnRlcnMgPSByZXF1aXJlRGlyKGRpcilcbiAgT2JqZWN0LmtleXMoYXVnbWVudGVycykuZm9yRWFjaChjb250ZW50VHlwZSA9PiB7XG4gICAgY29uc3QgYXVnbWVudCA9IGF1Z21lbnRlcnNbY29udGVudFR5cGVdXG4gICAgY29uc3QgZW50aXRpZXMgPSBjb250ZW50W2NvbnRlbnRUeXBlXVxuXG4gICAgaWYgKCFlbnRpdGllcykge1xuICAgICAgY29udGVudFtjb250ZW50VHlwZV0gPSBhdWdtZW50KHt9LCBjb250ZW50LCBjb25maWcpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBjb250ZW50W2NvbnRlbnRUeXBlXSA9IGF1Z21lbnQoZW50aXRpZXMsIGNvbnRlbnQsIGNvbmZpZylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnRlbnRbY29udGVudFR5cGVdID0gZW50aXRpZXMubWFwKGVudGl0eSA9PiBhdWdtZW50KGVudGl0eSwgY29udGVudCwgY29uZmlnKSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtQ29udGVudCAoY29udGVudCwgdHJhbnNmb3JtZXJOYW1lKSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVyRm4gPSB0cmFuc2Zvcm1lckJ5TmFtZSh0cmFuc2Zvcm1lck5hbWUpXG4gIHRyYW5zZm9ybWVyRm4oY29udGVudClcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtZXJCeU5hbWUgKHRyYW5zZm9ybWVyTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiByZXF1aXJlKGAuL2NvbnRlbnQtdHJhbnNmb3JtZXJzLyR7dHJhbnNmb3JtZXJOYW1lfWApXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCB0cmFuc2Zvcm1lciBcIiR7dHJhbnNmb3JtZXJOYW1lfVwiYClcbiAgfVxufVxuIl19