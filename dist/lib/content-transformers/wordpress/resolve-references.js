"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveReferences;


function resolveReferences(content) {
  Object.keys(content).forEach(function (contentType) {
    var entities = content[contentType];
    if (!Array.isArray(entities)) {
      processEntity(content, entities);
    } else {
      entities.forEach(function (entity) {
        return processEntity(content, entity);
      });
    }
  });

  return content;
}

function processEntity(srcContent, entity) {
  var acf = entity.acf;

  if (!acf) return;

  Object.keys(acf).forEach(function (propertyName) {
    var propertyValue = acf[propertyName];
    if (!isReference(propertyValue)) return;

    acf[propertyName] = resolvePropertyReferences(srcContent, propertyName, propertyValue);
  });
}

function isReference(entity) {
  return Array.isArray(entity) && entity.length && entity[0].ID && entity[0].post_type;
}

function getReferencedEntity(content, refEntitySrc) {
  var id = refEntitySrc.ID,
      postType = refEntitySrc.post_type;


  var entities = content[postType];
  return entities ? getById(entities, id) : refEntitySrc;
}

function resolvePropertyReferences(content, propertyName, propertyValue) {
  return propertyValue.map(function (refEntitySrc) {
    return getReferencedEntity(content, refEntitySrc);
  });
}

function getById(entities, id) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = entities[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var entity = _step.value;

      if (entity.id === id) return entity;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  throw new Error("Entity with id: '" + id + "' was not found in given list");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29udGVudC10cmFuc2Zvcm1lcnMvd29yZHByZXNzL3Jlc29sdmUtcmVmZXJlbmNlcy5qcyJdLCJuYW1lcyI6WyJyZXNvbHZlUmVmZXJlbmNlcyIsImNvbnRlbnQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImVudGl0aWVzIiwiY29udGVudFR5cGUiLCJBcnJheSIsImlzQXJyYXkiLCJwcm9jZXNzRW50aXR5IiwiZW50aXR5Iiwic3JjQ29udGVudCIsImFjZiIsInByb3BlcnR5VmFsdWUiLCJwcm9wZXJ0eU5hbWUiLCJpc1JlZmVyZW5jZSIsInJlc29sdmVQcm9wZXJ0eVJlZmVyZW5jZXMiLCJsZW5ndGgiLCJJRCIsInBvc3RfdHlwZSIsImdldFJlZmVyZW5jZWRFbnRpdHkiLCJyZWZFbnRpdHlTcmMiLCJpZCIsInBvc3RUeXBlIiwiZ2V0QnlJZCIsIm1hcCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFBZUEsaUI7OztBQUVmLFNBQVNBLGlCQUFULENBQTRCQyxPQUE1QixFQUFxQztBQUNuQ0MsU0FBT0MsSUFBUCxDQUFZRixPQUFaLEVBQXFCRyxPQUFyQixDQUE2Qix1QkFBZTtBQUMxQyxRQUFNQyxXQUFXSixRQUFRSyxXQUFSLENBQWpCO0FBQ0EsUUFBSSxDQUFDQyxNQUFNQyxPQUFOLENBQWNILFFBQWQsQ0FBTCxFQUE4QjtBQUM1Qkksb0JBQWNSLE9BQWQsRUFBdUJJLFFBQXZCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLGVBQVNELE9BQVQsQ0FBaUI7QUFBQSxlQUFVSyxjQUFjUixPQUFkLEVBQXVCUyxNQUF2QixDQUFWO0FBQUEsT0FBakI7QUFDRDtBQUNGLEdBUEQ7O0FBU0EsU0FBT1QsT0FBUDtBQUNEOztBQUVELFNBQVNRLGFBQVQsQ0FBd0JFLFVBQXhCLEVBQW9DRCxNQUFwQyxFQUE0QztBQUFBLE1BQ2xDRSxHQURrQyxHQUMxQkYsTUFEMEIsQ0FDbENFLEdBRGtDOztBQUUxQyxNQUFJLENBQUNBLEdBQUwsRUFBVTs7QUFFVlYsU0FBT0MsSUFBUCxDQUFZUyxHQUFaLEVBQWlCUixPQUFqQixDQUF5Qix3QkFBZ0I7QUFDdkMsUUFBTVMsZ0JBQWdCRCxJQUFJRSxZQUFKLENBQXRCO0FBQ0EsUUFBSSxDQUFDQyxZQUFZRixhQUFaLENBQUwsRUFBaUM7O0FBRWpDRCxRQUFJRSxZQUFKLElBQW9CRSwwQkFDbEJMLFVBRGtCLEVBRWxCRyxZQUZrQixFQUdsQkQsYUFIa0IsQ0FBcEI7QUFLRCxHQVREO0FBVUQ7O0FBRUQsU0FBU0UsV0FBVCxDQUFzQkwsTUFBdEIsRUFBOEI7QUFDNUIsU0FDRUgsTUFBTUMsT0FBTixDQUFjRSxNQUFkLEtBQ0VBLE9BQU9PLE1BRFQsSUFFRVAsT0FBTyxDQUFQLEVBQVVRLEVBRlosSUFHRVIsT0FBTyxDQUFQLEVBQVVTLFNBSmQ7QUFNRDs7QUFFRCxTQUFTQyxtQkFBVCxDQUE4Qm5CLE9BQTlCLEVBQXVDb0IsWUFBdkMsRUFBcUQ7QUFBQSxNQUU3Q0MsRUFGNkMsR0FJL0NELFlBSitDLENBRWpESCxFQUZpRDtBQUFBLE1BR3RDSyxRQUhzQyxHQUkvQ0YsWUFKK0MsQ0FHakRGLFNBSGlEOzs7QUFNbkQsTUFBTWQsV0FBV0osUUFBUXNCLFFBQVIsQ0FBakI7QUFDQSxTQUFPbEIsV0FDSG1CLFFBQVFuQixRQUFSLEVBQWtCaUIsRUFBbEIsQ0FERyxHQUVIRCxZQUZKO0FBR0Q7O0FBRUQsU0FBU0wseUJBQVQsQ0FBb0NmLE9BQXBDLEVBQTZDYSxZQUE3QyxFQUEyREQsYUFBM0QsRUFBMEU7QUFDeEUsU0FBT0EsY0FBY1ksR0FBZCxDQUFrQjtBQUFBLFdBQ3ZCTCxvQkFBb0JuQixPQUFwQixFQUE2Qm9CLFlBQTdCLENBRHVCO0FBQUEsR0FBbEIsQ0FBUDtBQUVEOztBQUVELFNBQVNHLE9BQVQsQ0FBa0JuQixRQUFsQixFQUE0QmlCLEVBQTVCLEVBQWdDO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQzlCLHlCQUFxQmpCLFFBQXJCLDhIQUErQjtBQUFBLFVBQXBCSyxNQUFvQjs7QUFDN0IsVUFBSUEsT0FBT1ksRUFBUCxLQUFjQSxFQUFsQixFQUFzQixPQUFPWixNQUFQO0FBQ3ZCO0FBSDZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBSzlCLFFBQU0sSUFBSWdCLEtBQUosdUJBQThCSixFQUE5QixtQ0FBTjtBQUNEIiwiZmlsZSI6InJlc29sdmUtcmVmZXJlbmNlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHJlc29sdmVSZWZlcmVuY2VzXG5cbmZ1bmN0aW9uIHJlc29sdmVSZWZlcmVuY2VzIChjb250ZW50KSB7XG4gIE9iamVjdC5rZXlzKGNvbnRlbnQpLmZvckVhY2goY29udGVudFR5cGUgPT4ge1xuICAgIGNvbnN0IGVudGl0aWVzID0gY29udGVudFtjb250ZW50VHlwZV1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBwcm9jZXNzRW50aXR5KGNvbnRlbnQsIGVudGl0aWVzKVxuICAgIH0gZWxzZSB7XG4gICAgICBlbnRpdGllcy5mb3JFYWNoKGVudGl0eSA9PiBwcm9jZXNzRW50aXR5KGNvbnRlbnQsIGVudGl0eSkpXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiBjb250ZW50XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NFbnRpdHkgKHNyY0NvbnRlbnQsIGVudGl0eSkge1xuICBjb25zdCB7IGFjZiB9ID0gZW50aXR5XG4gIGlmICghYWNmKSByZXR1cm5cblxuICBPYmplY3Qua2V5cyhhY2YpLmZvckVhY2gocHJvcGVydHlOYW1lID0+IHtcbiAgICBjb25zdCBwcm9wZXJ0eVZhbHVlID0gYWNmW3Byb3BlcnR5TmFtZV1cbiAgICBpZiAoIWlzUmVmZXJlbmNlKHByb3BlcnR5VmFsdWUpKSByZXR1cm5cblxuICAgIGFjZltwcm9wZXJ0eU5hbWVdID0gcmVzb2x2ZVByb3BlcnR5UmVmZXJlbmNlcyhcbiAgICAgIHNyY0NvbnRlbnQsXG4gICAgICBwcm9wZXJ0eU5hbWUsXG4gICAgICBwcm9wZXJ0eVZhbHVlXG4gICAgKVxuICB9KVxufVxuXG5mdW5jdGlvbiBpc1JlZmVyZW5jZSAoZW50aXR5KSB7XG4gIHJldHVybiAoXG4gICAgQXJyYXkuaXNBcnJheShlbnRpdHkpICYmXG4gICAgICBlbnRpdHkubGVuZ3RoICYmXG4gICAgICBlbnRpdHlbMF0uSUQgJiZcbiAgICAgIGVudGl0eVswXS5wb3N0X3R5cGVcbiAgKVxufVxuXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VkRW50aXR5IChjb250ZW50LCByZWZFbnRpdHlTcmMpIHtcbiAgY29uc3Qge1xuICAgIElEOiBpZCxcbiAgICBwb3N0X3R5cGU6IHBvc3RUeXBlXG4gIH0gPSByZWZFbnRpdHlTcmNcblxuICBjb25zdCBlbnRpdGllcyA9IGNvbnRlbnRbcG9zdFR5cGVdXG4gIHJldHVybiBlbnRpdGllc1xuICAgID8gZ2V0QnlJZChlbnRpdGllcywgaWQpXG4gICAgOiByZWZFbnRpdHlTcmNcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVByb3BlcnR5UmVmZXJlbmNlcyAoY29udGVudCwgcHJvcGVydHlOYW1lLCBwcm9wZXJ0eVZhbHVlKSB7XG4gIHJldHVybiBwcm9wZXJ0eVZhbHVlLm1hcChyZWZFbnRpdHlTcmMgPT5cbiAgICBnZXRSZWZlcmVuY2VkRW50aXR5KGNvbnRlbnQsIHJlZkVudGl0eVNyYykpXG59XG5cbmZ1bmN0aW9uIGdldEJ5SWQgKGVudGl0aWVzLCBpZCkge1xuICBmb3IgKGNvbnN0IGVudGl0eSBvZiBlbnRpdGllcykge1xuICAgIGlmIChlbnRpdHkuaWQgPT09IGlkKSByZXR1cm4gZW50aXR5XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYEVudGl0eSB3aXRoIGlkOiAnJHtpZH0nIHdhcyBub3QgZm91bmQgaW4gZ2l2ZW4gbGlzdGApXG59XG4iXX0=